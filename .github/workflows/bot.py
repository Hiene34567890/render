import asyncio
import random
import aiosqlite
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

TOKEN = "7661568375:AAHo-gAwHd1c2eTNp08spmteYrxgDbCK4ic"
DB_PATH = "game_data.db"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                name TEXT,
                balance INTEGER DEFAULT 0,
                games_played INTEGER DEFAULT 0,
                last_bonus TEXT
            )
        """)
        await db.commit()

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞ ---
async def register_user(user):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT OR IGNORE INTO users (user_id, name) VALUES (?, ?)", (user.id, user.first_name))
        await db.commit()

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await register_user(user)

    keyboard = [
        [InlineKeyboardButton("üéÅ –ë–æ–Ω—É—Å", callback_data="bonus")],
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="game")],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç üéÆ", reply_markup=reply_markup)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await query.answer()
    await register_user(user)

    async with aiosqlite.connect(DB_PATH) as db:
        if query.data == "bonus":
            row = await db.execute_fetchone("SELECT last_bonus, balance FROM users WHERE user_id = ?", (user.id,))
            now = datetime.now()
            last_bonus = datetime.fromisoformat(row[0]) if row[0] else now - timedelta(days=1)

            if now - last_bonus >= timedelta(hours=24):
                await db.execute("UPDATE users SET balance = balance + 10, last_bonus = ? WHERE user_id = ?", (now.isoformat(), user.id))
                await db.commit()
                await query.edit_message_text("üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 –º–æ–Ω–µ—Ç!")
            else:
                hours = (timedelta(hours=24) - (now - last_bonus)).seconds // 3600
                await query.edit_message_text(f"üîÑ –ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {hours} —á.")

        elif query.data == "profile":
            row = await db.execute_fetchone("SELECT name, balance, games_played FROM users WHERE user_id = ?", (user.id,))
            if row:
                name, balance, games = row
                achievements = []
                if games >= 5:
                    achievements.append("üèÜ –ì–µ–π–º–µ—Ä")
                if balance >= 50:
                    achievements.append("üí∞ –ë–æ–≥–∞—á")
                ach = "\n".join(achievements) if achievements else "–ù–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"

                await query.edit_message_text(f"üë§ {name}\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\nüéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {games}\nüèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n{ach}")

        elif query.data == "game":
            number = random.randint(1, 5)
            context.user_data["target"] = number
            await query.edit_message_text("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5. –í–≤–µ–¥–∏ /guess <—á–∏—Å–ª–æ>")

# --- –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ ---
async def guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if "target" not in context.user_data:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ 'üéÆ –ò–≥—Ä–∞—Ç—å'.")
        return

    try:
        guess = int(context.args[0])
    except:
        await update.message.reply_text("‚ö† –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: /guess 3")
        return

    target = context.user_data.pop("target")
    async with aiosqlite.connect(DB_PATH) as db:
        if guess == target:
            await db.execute("UPDATE users SET balance = balance + 5, games_played = games_played + 1 WHERE user_id = ?", (user_id,))
USER.ID - Ihr Medien-Login
USER.ID - Ihr Medien-Login
user.id
10:30


await db.commit()
            await update.message.reply_text("üéâ –í–µ—Ä–Ω–æ! +5 –º–æ–Ω–µ—Ç.")
        else:
            await db.execute("UPDATE users SET games_played = games_played + 1 WHERE user_id = ?", (user_id,))
            await db.commit()
            await update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ë—ã–ª–æ —á–∏—Å–ª–æ {target}.")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("guess", guess))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
